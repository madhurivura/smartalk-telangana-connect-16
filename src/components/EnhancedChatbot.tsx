
import React, { useState, useRef, useEffect } from 'react';
import { Send, Mic, Volume2, MicOff } from 'lucide-react';
import { useLanguage } from '@/contexts/LanguageContext';
import { useVoiceInput } from '@/hooks/useVoiceInput';
import { useTextToSpeech } from '@/hooks/useTextToSpeech';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

const EnhancedChatbot: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Hello! I can help you with government services. ‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞∏‡±á‡∞µ‡∞≤‡∞§‡±ã ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å.',
      isUser: false,
      timestamp: new Date()
    }
  ]);
  const [inputText, setInputText] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const { language, t } = useLanguage();
  const { isListening, transcript, startListening, stopListening, resetTranscript, isSupported: voiceSupported } = useVoiceInput();
  const { speak, isSpeaking, stop: stopSpeaking, isSupported: ttsSupported } = useTextToSpeech();

  const governmentServices = {
    english: {
      pension: "For pension applications, you need: 1) Age proof (60+ for old age pension), 2) Income certificate, 3) Bank account details, 4) Aadhaar card, 5) Passport size photos. Visit your nearest MRO office.",
      certificate: "For certificates like birth/death/caste: 1) Application form, 2) Proof documents, 3) Address proof, 4) Photos. Apply online at AP Land Records or visit Village Revenue Office.",
      ration: "For ration card: 1) Family income proof, 2) Address proof, 3) Aadhaar cards of all family members, 4) Photos. Apply at nearest Tahsildar office.",
      income: "Income certificate requires: 1) Salary certificates, 2) Property documents, 3) Bank statements (6 months), 4) Aadhaar card. Processing time: 15-30 days at Tahsildar office.",
      caste: "Caste certificate needs: 1) Parent's caste certificate, 2) School certificates, 3) Address proof, 4) Birth certificate. Apply at MRO office, takes 30-45 days.",
      birth: "Birth certificate: 1) Hospital birth record, 2) Parent's documents, 3) Address proof. Apply at Birth & Death Registrar office within 21 days of birth.",
      default: "I can help with pension, certificates, ration cards, and other government services. What specific service do you need help with?"
    },
    telugu: {
      pension: "‡∞™‡±Ü‡∞®‡±ç‡∞∑‡∞®‡±ç ‡∞Ö‡∞™‡±ç‡∞≤‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç: 1) ‡∞µ‡∞Ø‡∞∏‡±Å ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞Ç (‡∞µ‡±É‡∞¶‡±ç‡∞ß‡∞æ‡∞™‡±ç‡∞Ø ‡∞™‡±Ü‡∞®‡±ç‡∞∑‡∞®‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç 60+), 2) ‡∞Ü‡∞¶‡∞æ‡∞Ø ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞Ç, 3) ‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ç ‡∞ñ‡∞æ‡∞§‡∞æ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å, 4) ‡∞Ü‡∞ß‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç, 5) ‡∞™‡∞æ‡∞∏‡±ç‚Äå‡∞™‡±ã‡∞∞‡±ç‡∞ü‡±ç ‡∞∏‡±à‡∞ú‡±ç ‡∞´‡±ã‡∞ü‡±ã‡∞≤‡±Å. ‡∞Æ‡±Ä ‡∞∏‡∞Æ‡±Ä‡∞™ MRO ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞æ‡∞≤‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
      certificate: "‡∞ú‡∞®‡±ç‡∞Æ/‡∞Æ‡∞∞‡∞£/‡∞ï‡±Å‡∞≤ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç: 1) ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞´‡∞æ‡∞∞‡∞Ç, 2) ‡∞∞‡±Å‡∞ú‡±Å‡∞µ‡±Å ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å, 3) ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ ‡∞∞‡±Å‡∞ú‡±Å‡∞µ‡±Å, 4) ‡∞´‡±ã‡∞ü‡±ã‡∞≤‡±Å. AP ‡∞≤‡±ç‡∞Ø‡∞æ‡∞Ç‡∞°‡±ç ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç‡∞∏‡±ç‚Äå‡∞≤‡±ã ‡∞Ü‡∞®‡±ç‚Äå‡∞≤‡±à‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞ó‡±ç‡∞∞‡∞æ‡∞Æ ‡∞∞‡±Ü‡∞µ‡∞ø‡∞®‡±ç‡∞Ø‡±Ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞æ‡∞≤‡∞Ø‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
      ration: "‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç: 1) ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞Ü‡∞¶‡∞æ‡∞Ø ‡∞∞‡±Å‡∞ú‡±Å‡∞µ‡±Å, 2) ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ ‡∞∞‡±Å‡∞ú‡±Å‡∞µ‡±Å, 3) ‡∞ï‡±Å‡∞ü‡±Å‡∞Ç‡∞¨ ‡∞∏‡∞≠‡±ç‡∞Ø‡±Å‡∞≤‡∞Ç‡∞¶‡∞∞‡∞ø ‡∞Ü‡∞ß‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡±Å, 4) ‡∞´‡±ã‡∞ü‡±ã‡∞≤‡±Å. ‡∞∏‡∞Æ‡±Ä‡∞™ ‡∞§‡∞π‡∞∏‡±Ä‡∞≤‡±ç‡∞¶‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞æ‡∞≤‡∞Ø‡∞Ç‡∞≤‡±ã ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
      income: "‡∞Ü‡∞¶‡∞æ‡∞Ø ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç: 1) ‡∞ú‡±Ä‡∞§‡∞Ç ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å, 2) ‡∞Ü‡∞∏‡±ç‡∞§‡∞ø ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å, 3) ‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ç ‡∞∏‡±ç‡∞ü‡±á‡∞ü‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‡∞≤‡±Å (6 ‡∞®‡±Ü‡∞≤‡∞≤‡±Å), 4) ‡∞Ü‡∞ß‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±ç. ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∏‡∞Æ‡∞Ø‡∞Ç: ‡∞§‡∞π‡∞∏‡±Ä‡∞≤‡±ç‡∞¶‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞æ‡∞≤‡∞Ø‡∞Ç‡∞≤‡±ã 15-30 ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡±Å.",
      caste: "‡∞ï‡±Å‡∞≤ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç: 1) ‡∞§‡∞≤‡±ç‡∞≤‡∞ø‡∞¶‡∞Ç‡∞°‡±ç‡∞∞‡±Å‡∞≤ ‡∞ï‡±Å‡∞≤ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞Ç, 2) ‡∞™‡∞æ‡∞†‡∞∂‡∞æ‡∞≤ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å, 3) ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ ‡∞∞‡±Å‡∞ú‡±Å‡∞µ‡±Å, 4) ‡∞ú‡∞®‡±ç‡∞Æ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞Ç. MRO ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞æ‡∞≤‡∞Ø‡∞Ç‡∞≤‡±ã ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø, 30-45 ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡±Å ‡∞™‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.",
      birth: "‡∞ú‡∞®‡±ç‡∞Æ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞Ç: 1) ‡∞Ü‡∞∏‡±Å‡∞™‡∞§‡±ç‡∞∞‡∞ø ‡∞ú‡∞®‡±ç‡∞Æ ‡∞∞‡∞ø‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å, 2) ‡∞§‡∞≤‡±ç‡∞≤‡∞ø‡∞¶‡∞Ç‡∞°‡±ç‡∞∞‡±Å‡∞≤ ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å, 3) ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ ‡∞∞‡±Å‡∞ú‡±Å‡∞µ‡±Å. ‡∞ú‡∞®‡±ç‡∞Æ ‡∞§‡∞∞‡±ç‡∞µ‡∞æ‡∞§ 21 ‡∞∞‡±ã‡∞ú‡±Å‡∞≤‡∞≤‡±ã ‡∞ú‡∞®‡±ç‡∞Æ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞∞‡∞£ ‡∞∞‡∞ø‡∞ú‡∞ø‡∞∏‡±ç‡∞ü‡±ç‡∞∞‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞Ø‡∞æ‡∞≤‡∞Ø‡∞Ç‡∞≤‡±ã ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.",
      default: "‡∞®‡±á‡∞®‡±Å ‡∞™‡±Ü‡∞®‡±ç‡∞∑‡∞®‡±ç, ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å, ‡∞∞‡±á‡∞∑‡∞®‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞á‡∞§‡∞∞ ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞∏‡±á‡∞µ‡∞≤‡∞§‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å. ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞è ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞∏‡±á‡∞µ ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç?"
    }
  };

  const getResponse = (input: string) => {
    const lowerInput = input.toLowerCase();
    const services = governmentServices[language];
    
    if (lowerInput.includes('pension') || lowerInput.includes('‡∞™‡±Ü‡∞®‡±ç‡∞∑‡∞®‡±ç')) {
      return services.pension;
    } else if (lowerInput.includes('certificate') || lowerInput.includes('‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞™‡∞§‡±ç‡∞∞‡∞Ç')) {
      return services.certificate;
    } else if (lowerInput.includes('ration') || lowerInput.includes('‡∞∞‡±á‡∞∑‡∞®‡±ç')) {
      return services.ration;
    } else if (lowerInput.includes('income') || lowerInput.includes('‡∞Ü‡∞¶‡∞æ‡∞Ø')) {
      return services.income;
    } else if (lowerInput.includes('caste') || lowerInput.includes('‡∞ï‡±Å‡∞≤')) {
      return services.caste;
    } else if (lowerInput.includes('birth') || lowerInput.includes('‡∞ú‡∞®‡±ç‡∞Æ')) {
      return services.birth;
    } else {
      return services.default;
    }
  };

  const handleSendMessage = () => {
    const messageText = inputText.trim() || transcript.trim();
    if (!messageText) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      isUser: true,
      timestamp: new Date()
    };

    const botResponse: Message = {
      id: (Date.now() + 1).toString(),
      text: getResponse(messageText),
      isUser: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage, botResponse]);
    setInputText('');
    resetTranscript();
  };

  const handleVoiceInput = () => {
    if (isListening) {
      stopListening();
    } else {
      startListening(language);
    }
  };

  const handleTextToSpeech = (text: string) => {
    if (isSpeaking) {
      stopSpeaking();
    } else {
      speak(text, language);
    }
  };

  // Use transcript when available
  useEffect(() => {
    if (transcript) {
      setInputText(transcript);
    }
  }, [transcript]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="bg-[#e1dbd1] rounded-2xl shadow-2xl overflow-hidden">
      {/* Header */}
      <div className="bg-[#44646f] p-4 flex justify-between items-center">
        <h3 className="text-white font-semibold">SmartTalk Assistant</h3>
        <div className="flex items-center space-x-2 text-xs text-[#cbccc1]">
          {voiceSupported && <span>üé§</span>}
          {ttsSupported && <span>üîä</span>}
        </div>
      </div>

      {/* Chat Messages */}
      <div className="h-96 p-6 overflow-y-auto bg-white">
        <div className="space-y-4">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.isUser
                    ? 'bg-[#44646f] text-white'
                    : 'bg-[#cbccc1] text-[#3c392b]'
                }`}
              >
                <p>{message.text}</p>
                {!message.isUser && ttsSupported && (
                  <button
                    onClick={() => handleTextToSpeech(message.text)}
                    className="mt-2 text-[#44646f] hover:text-[#3c392b] transition-colors"
                    disabled={isSpeaking}
                  >
                    <Volume2 size={16} />
                  </button>
                )}
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input Area */}
      <div className="bg-[#e1dbd1] p-4 border-t border-[#cbccc1]">
        <div className="flex items-center space-x-3">
          {voiceSupported && (
            <button
              onClick={handleVoiceInput}
              className={`p-3 rounded-lg transition-colors ${
                isListening 
                  ? 'bg-red-500 text-white' 
                  : 'bg-[#44646f] text-white hover:bg-opacity-90'
              }`}
              title={isListening ? 'Stop listening' : 'Start voice input'}
            >
              {isListening ? <MicOff size={20} /> : <Mic size={20} />}
            </button>
          )}
          
          <input
            type="text"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder={
              language === 'english' 
                ? "Ask about government services..." 
                : "‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞∏‡±á‡∞µ‡∞≤ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø..."
            }
            className="flex-1 p-3 rounded-lg border border-[#cbccc1] focus:outline-none focus:ring-2 focus:ring-[#44646f] focus:border-transparent"
          />
          
          <button
            onClick={handleSendMessage}
            className="p-3 bg-[#44646f] text-white rounded-lg hover:bg-opacity-90 transition-colors"
            title="Send message"
          >
            <Send size={20} />
          </button>
        </div>
        
        {voiceSupported && (
          <p className="text-xs text-[#5d5c54] mt-2 text-center">
            {language === 'english' 
              ? 'Voice input and text-to-speech available in Telugu and English'
              : '‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞á‡∞®‡±ç‚Äå‡∞™‡±Å‡∞ü‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ü‡±Ü‡∞ï‡±ç‡∞∏‡±ç‡∞ü‡±ç-‡∞ü‡±Å-‡∞∏‡±ç‡∞™‡±Ä‡∞ö‡±ç ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞á‡∞Ç‡∞ó‡±ç‡∞≤‡±Ä‡∞∑‡±ç‚Äå‡∞≤‡±ã ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞â‡∞Ç‡∞¶‡∞ø'
            }
          </p>
        )}
      </div>
    </div>
  );
};

export default EnhancedChatbot;
